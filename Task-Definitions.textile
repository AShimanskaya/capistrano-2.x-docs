The simplest capistrano task would look like this, note there is nothing happening remotely here:

<pre>
desc "Print out the local time on the system"
task :time do
  puts Time.now.to_s
end
</pre>

In order to perform a similar action on a remote machine, assuming you have [[everything properly configured]], the same task might look something like this:

<pre>
set :server_ruby, '/opt/local/bin/ruby' 
desc "Print out the time on the remote servers"
task :remote_time, :roles => :app do
  puts capture("#{server_ruby} -e 'puts Time.now.to_s'")
end
</pre>

Note that even in this contrived example, there are some important things happening. Firstly we're setting a configuration variable, simply <code>:server_ruby</code>; this is a great way to ensure that environmental changes on the server to not break deploy scripts. Especially when deploying to production environments you should be certain of the commands which will take place.

We're also using the "capture()":http://rdoc.info/rdoc/capistrano/capistrano/blob/515db3a0dec421d1c2200316ab58d7704176d577/Capistrano/Configuration/Actions/Inspect.html#capture-instance_method method, which returns the value of the expression captured within.

Finally, you notice that this task is intended only to run on servers in the <code>:app</code> role.