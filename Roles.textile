Capistrano's default recipe "deploy.rb":http://github.com/capistrano/capistrano/blob/master/lib/capistrano/recipes/deploy.rb expects a number of default roles to be defined so that it may opperate correctly.

|^. <code>:web</code> | This is assumed to be your web servers (read: Apache / nginx / etc.) |
|^. <code>:app</code> | These are assumed to be your application servers, in a Ruby environment this means something like Mongrel, or Mongrel Cluster; it can also be your Passenger servers. |
|^. <code>:db</code> | This, naturally enough is your database server. You can use server/role modifiers below to control which is considered to be the primart one. |

h2. Populating Roles

<pre>
role :app, 'app1.example.com'
role :app, ['app2.example.com' 'app3.example.com']
role :web, 'web1.example.com'
</pre>

Notice that the role() method can take an array. You can read more in the API documentation "here":http://rdoc.info/rdoc/capistrano/capistrano/blob/515db3a0dec421d1c2200316ab58d7704176d577/Capistrano/Configuration/Roles.html#role-instance_method.

h2. Modifiers

The default recipe knows about two **modifiers**. That's to say extra configuration options that can be passed to role() to be used when speficing tasks.

|^. <code>:primary</code> | <code>true</code> or <code>false</code>. Used by the database related tasks to determine where to run migrations |
|^. <code>:no_release</code> | <code>true</code> or <code>false</code> Used by the code checkout tasks to determine where to install the code. Anything set <code>:no_release</code> will not checkout the code from the repository. |

The modifiers can be set in the following way:

<pre>
role :db, 'db1.example.com', :primary => true, :no_release => false
role :db, %w{db2.example.com db3.example.com}, :no_release => true
</pre>
